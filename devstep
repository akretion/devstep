#!/usr/bin/env bash

set -eu

#VERSION='v0.0.1'
VERSION='v0.1'

if [ "${1:-}" = '--version' ] || [ "${1:-}" = '-v' ]; then
  echo "${VERSION}"
  exit 0
fi

if [ "${1:-}" = '--debug' ] || [ "${1:-}" = '-d' ]; then
  DEVSTEP_DEBUG='1'
  shift 1
fi

DEVSTEP_DEBUG=${DEVSTEP_DEBUG:-}
if [ "$DEVSTEP_DEBUG" = '1' ]; then
  export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '
  set -x
fi

################################################################################
## Set default variables

## Host path for keeping devstep cached packages
DEVSTEP_CACHE_PATH="/tmp/devstep/cache"

## Root path to the project being built
DEVSTEP_WORKSPACE_PATH=`pwd`

## Name of the project being worked on
DEVSTEP_WORKSPACE_NAME=$(basename ${DEVSTEP_WORKSPACE_PATH})

## Name of Docker repository to use for the project
DEVSTEP_WORKSPACE_REPO="devstep/${DEVSTEP_WORKSPACE_NAME}"

## Starting point for project images
DEVSTEP_SOURCE_IMAGE="rvalyi/devstep-sa:${VERSION}"

## Global options for `docker run`
DEVSTEP_RUN_OPTS=

## Automatic addons provisioning is disabled by default
DEVSTEP_CONFIGURE_ADDONS='0'

## `devstep CMD` specific options for `docker run`
DEVSTEP_BUILD_RUN_OPTS=
DEVSTEP_BOOTSTRAP_RUN_OPTS=
DEVSTEP_HACK_RUN_OPTS=

################################################################################
## Load project and user specific configs

## Start with user configs ...
[ -f $HOME/.devsteprc ] && \
  source $HOME/.devsteprc

## ... and override with project configs
[ -f $DEVSTEP_WORKSPACE_PATH/.devsteprc ] && \
  source $DEVSTEP_WORKSPACE_PATH/.devsteprc

################################################################################
## Parse arguments

usage() {
    cat <<EOF
Usage: devstep COMMAND [OPTIONS]

Commands:
  build     - Build a Docker image for current directory sources based on latest successfull build
  clean     - Remove all images built for the current project
  pristine  - Rebuild current project associated Docker image from scratch
  bootstrap - Interactively build a base Docker image for the project based on latest successfull build
  hack      - Start a hacking session for the current project using latest version of image and discard the container on exit
  run       - Run a one off command against the current source image
  images    - Display images available for the current project
  ps        - List all containers associated with the current project
  info      - Show some information about the current project

Available options:
[ -h | --help ]:     This help message
[ -r | --run-opts ]: Arguments to provide to the 'docker run' command during the build
[ -c | --command ]:  Command to use for 'devstep run'
[ -f | --force ]:    Force 'yes' answer to commands that requires confirmation
[ -w | --workspace]: Set the workspace name used when commiting docker images
EOF
    return 0
}

options=$(getopt -o h,f,r:,c:,w: -l help,force,run-opts:,command:,workspace: -- "$@")

if [ $? -ne 0 ]; then
    usage
    exit 1
fi
eval set -- "$options"

USER_RUN_OPTS=
USER_RUN_CMD=
USER_FORCE_YES='0'
while :; do
    case "$1" in
        -h|--help)          usage && exit 1;;
        -r|--run-opts)      USER_RUN_OPTS="${USER_RUN_OPTS} ${2}"; shift 2;;
        -c|--command)       USER_RUN_CMD="${2}"; shift 2;;
        -f|--force)         USER_FORCE_YES="1"; shift 1;;
        -w|--workspace)
          DEVSTEP_WORKSPACE_NAME="${2}"
          DEVSTEP_WORKSPACE_REPO="devstep/${DEVSTEP_WORKSPACE_NAME}"
          shift 2;;
        *)                  break;;
    esac
done

# Remove '--' from args
shift 1

# We need a command to run
if [ "$#" != '1' ]; then
  usage && exit 1
fi

COMMAND="${1}"

################################################################################
## Handle `pristine` and `clean` commands

function confirm_clean_repo() {
  if [ "${USER_FORCE_YES}" = '1' ]; then
    return 0
  fi

  echo    "==> You are about to remove ${1} image(s) / tag(s) and ${2} container(s) for the '${DEVSTEP_WORKSPACE_REPO}' repository" 1>&2
  echo -n '    Are you sure about that? [y/N] ' 1>&2
  read answer
  if ! $(echo "${answer}" | grep -qi '^y'); then
    echo 'Aborting' 1>&2
    exit 1
  fi
  return 0
}

function clean_repo() {
  images=$(docker images | grep "^${DEVSTEP_WORKSPACE_REPO}" | awk '{ print $3 }') || true
  containers=$(docker ps -a | grep " ${DEVSTEP_SOURCE_IMAGE}\|${DEVSTEP_WORKSPACE_REPO}\|devhack-${DEVSTEP_WORKSPACE_NAME}" | wc -l || echo '0' 1>&2)
  if ! [ -z "${images}" ]; then
    confirm_clean_repo $(echo $images | wc -w) $containers

    containers=$(docker ps -a | grep " ${DEVSTEP_WORKSPACE_REPO}" | awk '{ print $1 }') || true
    echo '==> Removing previously tagged images and corresponding containers' 1>&2
    docker rm -v -f $containers 2>/dev/null || true
    docker rmi -f $images 2>/dev/null || true
    echo
  else
    echo "==> No tagged images found for the '${DEVSTEP_WORKSPACE_REPO}' repository" 1>&2
  fi
}

if [ "${COMMAND}" = 'pristine' ] || [ "${COMMAND}" = 'clean' ]; then
  clean_repo
fi

if [ "${COMMAND}" = 'clean' ]; then
  # If we got to this point, there's nothing else we need to do
  exit 0
fi

if [ "${COMMAND}" = 'pristine' ]; then
  # From this point on, the command behaves as the build command
  COMMAND='build'
fi

################################################################################
## Build options to use on `docker run`

# If cache path is still set at this point
if ! [ -z "${DEVSTEP_CACHE_PATH}" ]; then
  DEVSTEP_RUN_OPTS="${DEVSTEP_RUN_OPTS} -v ${DEVSTEP_CACHE_PATH}:/.devstep/cache"
fi

# If by whatever reason this is blank
if [ -z "${DEVSTEP_WORKSPACE_PATH}" ]; then
  echo 'Unknown workspace path!'
  exit 1
fi

CURRENT_DEVSTEP_RUN_OPTS="${DEVSTEP_RUN_OPTS} -v ${DEVSTEP_WORKSPACE_PATH}:/workspace -w /workspace"

# if Docker repo exists, we use the latest version as the source image
if $(docker images | grep -q "^${DEVSTEP_WORKSPACE_REPO}"); then
  DEVSTEP_SOURCE_IMAGE="${DEVSTEP_WORKSPACE_REPO}:latest"
else # otherwise we start from scratch
  DEVSTEP_SOURCE_IMAGE=${DEVSTEP_SOURCE_IMAGE}
fi

if [ "${COMMAND}" = 'build' ]; then
  CURRENT_DEVSTEP_RUN_OPTS="${CURRENT_DEVSTEP_RUN_OPTS} -d ${DEVSTEP_BUILD_RUN_OPTS}"
  TARGET_IMAGE="${DEVSTEP_WORKSPACE_REPO}:latest"
  RUN_CMD="/.devstep/bin/build-project /workspace"
  if [ "${DEVSTEP_CONFIGURE_ADDONS}" = '1' ]; then
    RUN_CMD="${RUN_CMD} --configure-addons"
  fi

elif [ "${COMMAND}" = 'bootstrap' ]; then
  CID='devstep-bootstrap'
  CURRENT_DEVSTEP_RUN_OPTS="${CURRENT_DEVSTEP_RUN_OPTS} -d -ti ${DEVSTEP_BOOTSTRAP_RUN_OPTS} --name ${CID}"
  TARGET_IMAGE="${DEVSTEP_WORKSPACE_REPO}:latest"
  RUN_CMD="bash"

elif [ "${COMMAND}" = 'hack' ]; then
  CID="devhack-${DEVSTEP_WORKSPACE_NAME}-$(date +%Y%m%d%H%M%N)"
  CURRENT_DEVSTEP_RUN_OPTS="${CURRENT_DEVSTEP_RUN_OPTS} -ti --rm ${DEVSTEP_HACK_RUN_OPTS} --name ${CID}"
  RUN_CMD="/.devstep/bin/hack"
  if [ "${DEVSTEP_CONFIGURE_ADDONS}" = '1' ]; then
    RUN_CMD="${RUN_CMD} --configure-addons"
  fi

elif [ "${COMMAND}" = 'info' ] || [ "${COMMAND}" = 'images' ] || [ "${COMMAND}" = 'ps' ]; then
  # Nothing to do here yet
  true

elif [ "${COMMAND}" = 'run' ]; then
  RUN_CMD="${USER_RUN_CMD}"
  if [ -z "${RUN_CMD}" ]; then
    echo 'You need to provide a command for "devstep run"'
    usage && exit 1
  fi
  CURRENT_DEVSTEP_RUN_OPTS="${CURRENT_DEVSTEP_RUN_OPTS} -ti --rm ${DEVSTEP_HACK_RUN_OPTS}"

else
  echo "Error: Command not found: ${COMMAND}"
  usage && exit 1
fi


################################################################################
## Handle info commands

function ensure_indent() {
  while read line; do
    echo $'\e[1G   ' "$line"
  done
}

if [ "${COMMAND}" = 'info' ] || [ "${COMMAND}" = 'images' ] || [ "${COMMAND}" = 'ps' ]; then
  if [ "${COMMAND}" = 'info' ] || [ "${COMMAND}" = 'images' ]; then
    images=$(docker images | grep "^${DEVSTEP_WORKSPACE_REPO}") || true
    if ! [ -z "${images}" ]; then
      echo '==> Images'
      docker images | head -n 1 | ensure_indent
      echo "${images}" | ensure_indent
      echo -e "==> Total tags: $(docker images | grep "^${DEVSTEP_WORKSPACE_REPO}" | wc -l)\n"
    else
      echo -e "==> No images found for this workspace!\n"
    fi
  fi

  if [ "${COMMAND}" = 'info' ] || [ "${COMMAND}" = 'ps' ]; then
    containers=$(docker ps -a | grep " ${DEVSTEP_SOURCE_IMAGE}\|${DEVSTEP_WORKSPACE_REPO}\|devhack-${DEVSTEP_WORKSPACE_NAME}" || echo -n)
    if ! [ -z "${containers}" ]; then
      echo -e '==> Containers'
      docker ps -a | head -n 1 | ensure_indent
      echo "${containers}" | ensure_indent
      echo -e "==> Total containers: $(echo $containers | wc -l)\n"
    else
      echo -e "==> No containers found for this workspace!\n"
    fi
  fi

  if [ "${COMMAND}" = 'info' ] ; then
    echo -e '==> Devstep configs'
    for var in $(compgen -v | grep '^DEVSTEP_'); do
      echo "-> $var='${!var}'" | ensure_indent
    done
  fi

  # And we're done!
  exit 0
fi

################################################################################
## Build / hack on image

# Append user provided docker run options at the end so that it has a higher precedence
CURRENT_DEVSTEP_RUN_OPTS="${CURRENT_DEVSTEP_RUN_OPTS} ${USER_RUN_OPTS}"

function docker_run() {
  echo '==> Creating container' 1>&2
  #echo "    \`- docker run ${CURRENT_DEVSTEP_RUN_OPTS} ${DEVSTEP_SOURCE_IMAGE} -- ${RUN_CMD}" 1>&2
  #echo 1>&2
  eval "docker run ${CURRENT_DEVSTEP_RUN_OPTS} ${DEVSTEP_SOURCE_IMAGE} -- ${RUN_CMD}"
  return $?
}

if [ $COMMAND = 'hack' ] || [ $COMMAND = 'run' ]; then
  docker_run
  exit $?
elif [ $COMMAND = 'bootstrap' ]; then
  docker_run
  docker attach $CID
  test $(docker wait $CID) -eq '0' || {
    if [ "${USER_FORCE_YES}" != '1' ]; then
      echo    '==> The bootstrap process has finished and the container returned'
      echo    '    an exit status != 0'
      echo -n '    Do you want to go ahead and commit this image? [y/N] '
      read answer
      if ! $(echo "${answer}" | grep -qi '^y'); then
        echo 'Aborting'
        docker rm -v $CID > /dev/null
        exit 1
      fi
    fi
  }
elif [ $COMMAND = 'build' ]; then
  CID=$(docker_run)
  docker attach $CID
  test $(docker wait $CID) -eq 0

  echo -e "\n==> Commiting temporary image '${DEVSTEP_WORKSPACE_REPO}:tmp'"
  docker rmi "${DEVSTEP_WORKSPACE_REPO}:tmp" &> /dev/null || true
  docker commit $CID "${DEVSTEP_WORKSPACE_REPO}:tmp"
  docker rm -v $CID

  # Changes container's CMD to run a simple bash session and the WORKDIR back to
  # / since the project sources won't be mounted by default
  echo -e "\n==> Fixing temporary image CMD and WORKDIR"
  CID=$(docker run ${DEVSTEP_RUN_OPTS} -d -w /.devstep ${DEVSTEP_WORKSPACE_REPO}:tmp bash)
  # TODO: Replace line above with this one once a new Docker release is out with
  #       https://github.com/dotcloud/docker/pull/6646
  # CID=$(docker run ${DEVSTEP_RUN_OPTS} -d -w / ${DEVSTEP_WORKSPACE_REPO}:tmp bash)
  docker stop -t=1 $CID
fi

TIMESTAMP=$(date -u +"%Y%m%d%H%M%S")
echo -e "\n==> Commiting '${TARGET_IMAGE}' and '${DEVSTEP_WORKSPACE_REPO}:${TIMESTAMP}'"
docker commit $CID "${DEVSTEP_WORKSPACE_REPO}:${TIMESTAMP}"
docker tag "${DEVSTEP_WORKSPACE_REPO}:${TIMESTAMP}" "${DEVSTEP_WORKSPACE_REPO}:latest"

echo -e "\n==> Removing temporary artifacts used for build"
docker rm -v $CID
docker rmi "${DEVSTEP_WORKSPACE_REPO}:tmp" &> /dev/null || true
